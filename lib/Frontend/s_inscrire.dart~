import 'package:flutter/material.dart';
import 'package:scholaria_shop_v1/Frontend/se_connecter.dart';

class PageInscription extends StatefulWidget {
  const PageInscription({super.key});

  @override
  _PageInscriptionState createState() => _PageInscriptionState();
}

class _PageInscriptionState extends State<PageInscription> {
  final _formKey = GlobalKey<FormState>();

  String nomComplet = '';
  String email = '';
  String motDePasse = '';
  String confirmationMotDePasse = '';

  bool etoileErreurNom = false;
  bool etoileErreurEmail = false;
  bool etoileErreurMotDePasse = false;
  bool etoileErreurConfirmation = false;

  bool cadreVertValideNom = false;
  bool cadreVertValideEmail = false;
  bool cadreVertValideMotDePasse = false;
  bool cadreVertValideConfirmation = false;

  final RegExp _regexNom = RegExp(r'^[a-zA-Z\s]{3,}$');
  final RegExp _regexEmail = RegExp(r'^.+@.+\..+$');
  final RegExp _regexMotDePasse = RegExp(r'^(?=.*[A-Za-z])(?=.*\d)(?=.*[_#@]).{6,}$');

  bool cacherMotDePasse = true;
  bool cacherConfirmation = true;

  late FocusNode focusNom;
  late FocusNode focusEmail;
  late FocusNode focusMotDePasse;
  late FocusNode focusConfirmation;

  @override
  void initState() {
    super.initState();
    focusNom = FocusNode();
    focusEmail = FocusNode();
    focusMotDePasse = FocusNode();
    focusConfirmation = FocusNode();

    focusNom.addListener(() => setState(() => etoileErreurNom = focusNom.hasFocus));
    focusEmail.addListener(() => setState(() => etoileErreurEmail = focusEmail.hasFocus));
    focusMotDePasse.addListener(() => setState(() => etoileErreurMotDePasse = focusMotDePasse.hasFocus));
    focusConfirmation.addListener(() => setState(() => etoileErreurConfirmation = focusConfirmation.hasFocus));
  }

  @override
  void dispose() {
    focusNom.dispose();
    focusEmail.dispose();
    focusMotDePasse.dispose();
    focusConfirmation.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final Color couleurGris = isDark ? Colors.grey.shade300 : Colors.grey.shade600;
    final Color fond = isDark ? const Color(0xFF121212) : const Color(0xFFFAFAFA);
    final Color champFond = isDark ? const Color(0xFF1E1E1E) : Colors.white;
    final Color texteNoir = isDark ? Colors.white70 : Colors.black;

    return Scaffold(
      backgroundColor: fond,
      body: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 40),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Center(
              child: Image.asset(
                isDark ? 'assets/logo1_sombre.png' : 'assets/logo2.png',
                width: 250,
                height: 250,
              ),
            ),
            Form(
              key: _formKey,
              child: Column(
                children: [
                  // NOM COMPLET
                  _buildTextField(
                    label: 'Nom complet',
                    value: nomComplet,
                    isDark: isDark,
                    focusNode: focusNom,
                    couleurGris: couleurGris,
                    champFond: champFond,
                    texteNoir: texteNoir,
                    icon: Icons.person,
                    etoileErreur: etoileErreurNom,
                    cadreVert: cadreVertValideNom,
                    validator: (val) {
                      if (val == null || val.isEmpty || val.length < 3 || !_regexNom.hasMatch(val)) {
                        setState(() {
                          etoileErreurNom = true;
                          cadreVertValideNom = false;
                        });
                        return 'Entrez un nom valide';
                      }
                      setState(() {
                        cadreVertValideNom = true;
                        etoileErreurNom = false;
                      });
                      return null;
                    },
                    onChanged: (val) {
                      nomComplet = val;
                      setState(() {
                        cadreVertValideNom = _regexNom.hasMatch(val);
                        etoileErreurNom = !cadreVertValideNom;
                      });
                    },
                    onSaved: (val) => nomComplet = val ?? '',
                  ),

                  if (cadreVertValideNom)
                    _buildCorrectLabel(),

                  const SizedBox(height: 15),

                  // EMAIL
                  _buildTextField(
                    label: 'Adresse Email',
                    value: email,
                    isDark: isDark,
                    focusNode: focusEmail,
                    couleurGris: couleurGris,
                    champFond: champFond,
                    texteNoir: texteNoir,
                    icon: Icons.email,
                    etoileErreur: etoileErreurEmail,
                    cadreVert: cadreVertValideEmail,
                    validator: (val) {
                      if (val == null || !RegExp(r'^[\w\.\-]+@gmail\.com$').hasMatch(val)) {
                        setState(() {
                          etoileErreurEmail = true;
                          cadreVertValideEmail = false;
                        });
                        return 'Email invalide';
                      }
                      setState(() {
                        cadreVertValideEmail = true;
                        etoileErreurEmail = false;
                      });
                      return null;
                    },
                    onChanged: (val) {
                      email = val;
                      setState(() {
                        cadreVertValideEmail = RegExp(r'^[\w\.\-]+@gmail\.com$').hasMatch(val);
                        etoileErreurEmail = !cadreVertValideEmail;
                      });
                    },
                    onSaved: (val) => email = val ?? '',
                  ),

                  if (cadreVertValideEmail)
                    _buildCorrectLabel(),

                  const SizedBox(height: 15),

                  // MOT DE PASSE
                  _buildPasswordField(
                    label: 'Mot de passe',
                    controllerValue: motDePasse,
                    isDark: isDark,
                    focusNode: focusMotDePasse,
                    couleurGris: couleurGris,
                    champFond: champFond,
                    texteNoir: texteNoir,
                    cacher: cacherMotDePasse,
                    onToggle: () => setState(() => cacherMotDePasse = !cacherMotDePasse),
                    etoileErreur: etoileErreurMotDePasse,
                    cadreVert: cadreVertValideMotDePasse,
                    validator: (val) {
                      if (!_regexMotDePasse.hasMatch(val ?? '')) {
                        setState(() {
                          etoileErreurMotDePasse = true;
                          cadreVertValideMotDePasse = false;
                        });
                        return 'Min. 6 caractères, lettre, chiffre, caractère spécial';
                      }
                      setState(() {
                        cadreVertValideMotDePasse = true;
                        etoileErreurMotDePasse = false;
                      });
                      return null;
                    },
                    onChanged: (val) => motDePasse = val,
                  ),

                  if (cadreVertValideMotDePasse)
                    _buildCorrectLabel(),

                  const SizedBox(height: 15),

                  // CONFIRMATION
                  _buildPasswordField(
                    label: 'Confirmer le mot de passe',
                    controllerValue: confirmationMotDePasse,
                    isDark: isDark,
                    focusNode: focusConfirmation,
                    couleurGris: couleurGris,
                    champFond: champFond,
                    texteNoir: texteNoir,
                    cacher: cacherConfirmation,
                    onToggle: () => setState(() => cacherConfirmation = !cacherConfirmation),
                    etoileErreur: etoileErreurConfirmation,
                    cadreVert: cadreVertValideConfirmation,
                    validator: (val) {
                      if (val != motDePasse) {
                        setState(() {
                          etoileErreurConfirmation = true;
                          cadreVertValideConfirmation = false;
                        });
                        return 'Les mots de passe ne correspondent pas';
                      }
                      setState(() {
                        cadreVertValideConfirmation = true;
                        etoileErreurConfirmation = false;
                      });
                      return null;
                    },
                    onChanged: (val) => confirmationMotDePasse = val,
                  ),

                  if (cadreVertValideConfirmation)
                    _buildCorrectLabel(),

                  const SizedBox(height: 20),

                  // BOUTON S’INSCRIRE
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFFE61580),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 4),
                      ),
                      onPressed: () {
                        if (_formKey.currentState!.validate()) {
                          _formKey.currentState!.save();
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('Bienvenue, $nomComplet !')),
                          );
                        }
                      },
                      child: const Text('S’inscrire', style: TextStyle(color: Colors.white)),
                    ),
                  ),

                  const SizedBox(height: 25),

                  // OU
                  Row(
                    children: const [
                      Expanded(child: Divider(color: Color(0xFFE61580))),
                      Padding(
                        padding: EdgeInsets.symmetric(horizontal: 8),
                        child: Text("ou"),
                      ),
                      Expanded(child: Divider(color: Color(0xFFE61580))),
                    ],
                  ),

                  const SizedBox(height: 20),

                  // BOUTONS GOOGLE & FACEBOOK
                  _buildSocialButton('Continuer avec Google', 'assets/google.jpeg', texteNoir),
                  const SizedBox(height: 10),
                  _buildSocialButton('Continuer avec Facebook', 'assets/facebook.jpeg', texteNoir),

                  const SizedBox(height: 20),

                  // LIEN LOGIN
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text('Déjà vous avez un compte ? ', style: TextStyle(color: couleurGris)),
                      GestureDetector(
                        onTap: () {
                          if (_formKey.currentState?.validate() ?? false) {
                            Navigator.push(
                              context,
                              MaterialPageRoute(builder: (_) => const SeConnecter(nomComplet: '')),
                            );
                          }
                        },
                        child: const Text(' Login', style: TextStyle(color: Color(0xFFE61580), fontWeight: FontWeight.bold)),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField({
    required String label,
    required String value,
    required FocusNode focusNode,
    required bool isDark,
    required Color couleurGris,
    required Color champFond,
    required Color texteNoir,
    required IconData icon,
    required bool etoileErreur,
    required bool cadreVert,
    required FormFieldValidator<String> validator,
    required ValueChanged<String> onChanged,
    required FormFieldSetter<String> onSaved,
  }) {
    return TextFormField(
      focusNode: focusNode,
      cursorColor: couleurGris,
      style: TextStyle(color: texteNoir),
      decoration: InputDecoration(
        label: RichText(
          text: TextSpan(
            text: label,
            style: TextStyle(color: couleurGris, fontSize: 16),
            children: etoileErreur ? [const TextSpan(text: ' *', style: TextStyle(color: Colors.red))] : [],
          ),
        ),
        prefixIcon: Icon(icon, color: couleurGris),
        filled: true,
        fillColor: champFond,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: cadreVert ? Colors.green : couleurGris),
        ),
      ),
      validator: validator,
      onChanged: onChanged,
      onSaved: onSaved,
    );
  }

  Widget _buildPasswordField({
    required String label,
    required String controllerValue,
    required FocusNode focusNode,
    required bool isDark,
    required bool cacher,
    required VoidCallback onToggle,
    required Color couleurGris,
    required Color champFond,
    required Color texteNoir,
    required bool etoileErreur,
    required bool cadreVert,
    required FormFieldValidator<String> validator,
    required ValueChanged<String> onChanged,
  }) {
    return TextFormField(
      focusNode: focusNode,
      cursorColor: couleurGris,
      obscureText: cacher,
      style: TextStyle(color: texteNoir),
      decoration: InputDecoration(
        label: RichText(
          text: TextSpan(
            text: label,
            style: TextStyle(color: couleurGris, fontSize: 16),
            children: etoileErreur ? [const TextSpan(text: ' *', style: TextStyle(color: Colors.red))] : [],
          ),
        ),
        prefixIcon: Icon(Icons.lock, color: couleurGris),
        suffixIcon: IconButton(
          icon: Icon(cacher ? Icons.visibility_off : Icons.visibility, color: couleurGris),
          onPressed: onToggle,
        ),
        filled: true,
        fillColor: champFond,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: cadreVert ? Colors.green : couleurGris),
        ),
      ),
      validator: validator,
      onChanged: onChanged,
    );
  }

  Widget _buildCorrectLabel() {
    return const Padding(
      padding: EdgeInsets.only(top: 4, right: 12),
      child: Align(
        alignment: Alignment.centerRight,
        child: Text('Correct', style: TextStyle(color: Colors.green, fontSize: 12)),
      ),
    );
  }

  Widget _buildSocialButton(String text, String asset, Color textColor) {
    return SizedBox(
      width: double.infinity,
      child: OutlinedButton.icon(
        icon: Image.asset(asset, height: 20),
        label: Text(text, style: TextStyle(color: textColor)),
        onPressed: () {},
      ),
    );
  }
}
