import 'package:flutter/material.dart';
import 's_inscrire.dart'; // Assure-toi que ce fichier existe

class SeConnecter extends StatefulWidget {
  const SeConnecter({super.key});

  @override
  _SeConnecterState createState() => _SeConnecterState();
}

class _SeConnecterState extends State<SeConnecter> {
  final _formKey = GlobalKey<FormState>();

  String email = '';
  String motDePasse = '';
  bool cacherMotDePasse = true;
  bool cadreVertValideEmail = false;
  bool cadreVertValideMotDePasse = false;
  bool etoileErreurEmail = false;
  bool etoileErreurMotDePasse = false;
  bool rememberMe = false;

  final Color couleurGris = Colors.grey.shade600;

  final RegExp _regexEmail = RegExp(r'^[\w\.\-]+@gmail\.com\$');
  final RegExp _regexMotDePasse =
  RegExp(r'^(?=.*[A-Za-z])(?=.*\d)(?=.*[_#@]).{6,}\$');

  final FocusNode focusEmail = FocusNode();
  final FocusNode focusMotDePasse = FocusNode();

  @override
  void dispose() {
    focusEmail.dispose();
    focusMotDePasse.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFFAFAFA),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                const SizedBox(height: 20),
                Center(
                  child: Container(
                    margin: const EdgeInsets.only(bottom: 0),
                    child: Image.asset(
                      'assets/logo2.png',
                      width: 250,
                      height: 250,
                    ),
                  ),
                ),
                const SizedBox(height: 30),

                // Email
                TextFormField(
                  focusNode: focusEmail,
                  cursorColor: couleurGris,
                  keyboardType: TextInputType.emailAddress,
                  decoration: InputDecoration(
                    label: RichText(
                      text: TextSpan(
                        text: 'Adresse Email',
                        style: TextStyle(color: couleurGris, fontSize: 16),
                        children: etoileErreurEmail
                            ? [
                          const TextSpan(
                            text: ' *',
                            style: TextStyle(color: Colors.red),
                          )
                        ]
                            : [],
                      ),
                    ),
                    prefixIcon: Icon(Icons.email, color: couleurGris),
                    filled: true,
                    fillColor: Colors.white,
                    contentPadding:
                    const EdgeInsets.symmetric(vertical: 6),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: cadreVertValideEmail
                            ? Colors.green
                            : Colors.grey.shade400,
                      ),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: cadreVertValideEmail
                            ? Colors.green
                            : Colors.grey.shade400,
                      ),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: cadreVertValideEmail
                            ? Colors.green
                            : Colors.grey.shade400,
                      ),
                    ),
                  ),
                  onChanged: (val) {
                    if (val.isNotEmpty && _regexEmail.hasMatch(val)) {
                      setState(() {
                        cadreVertValideEmail = true;
                        etoileErreurEmail = false;
                      });
                    } else {
                      setState(() {
                        cadreVertValideEmail = false;
                        etoileErreurEmail = true;
                      });
                    }
                  },
                  validator: (val) {
                    if (val == null || val.isEmpty) {
                      setState(() {
                        etoileErreurEmail = true;
                        cadreVertValideEmail = false;
                      });
                      return 'Ce champ est obligatoire';
                    }
                    if (!_regexEmail.hasMatch(val)) {
                      setState(() {
                        etoileErreurEmail = true;
                        cadreVertValideEmail = false;
                      });
                      return 'Email invalide Ex. exemple@gmail.com';
                    }
                    setState(() {
                      etoileErreurEmail = false;
                      cadreVertValideEmail = true;
                    });
                    return null;
                  },
                ),
                if (cadreVertValideEmail)
                  Padding(
                    padding: const EdgeInsets.only(top: 4, right: 12),
                    child: Align(
                      alignment: Alignment.centerRight,
                      child: Text(
                        'Correct',
                        style:
                        TextStyle(color: Colors.green, fontSize: 12),
                      ),
                    ),
                  ),

                const SizedBox(height: 16),

                // Mot de passe
                TextFormField(
                  focusNode: focusMotDePasse,
                  cursorColor: couleurGris,
                  obscureText: cacherMotDePasse,
                  decoration: InputDecoration(
                    label: RichText(
                      text: TextSpan(
                        text: 'Mot de passe',
                        style: TextStyle(color: couleurGris, fontSize: 16),
                        children: etoileErreurMotDePasse
                            ? [
                          const TextSpan(
                            text: ' *',
                            style: TextStyle(color: Colors.red),
                          )
                        ]
                            : [],
                      ),
                    ),
                    prefixIcon: Icon(Icons.lock, color: couleurGris),
                    suffixIcon: IconButton(
                      icon: Icon(
                        cacherMotDePasse
                            ? Icons.visibility_off
                            : Icons.visibility,
                        color: couleurGris,
                      ),
                      onPressed: () {
                        setState(() {
                          cacherMotDePasse = !cacherMotDePasse;
                        });
                      },
                    ),
                    filled: true,
                    fillColor: Colors.white,
                    contentPadding:
                    const EdgeInsets.symmetric(vertical: 6),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: cadreVertValideMotDePasse
                            ? Colors.green
                            : Colors.grey.shade400,
                      ),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: cadreVertValideMotDePasse
                            ? Colors.green
                            : Colors.grey.shade400,
                      ),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: BorderSide(
                        color: cadreVertValideMotDePasse
                            ? Colors.green
                            : Colors.grey.shade400,
                      ),
                    ),
                  ),
                  onChanged: (val) {
                    if (_regexMotDePasse.hasMatch(val)) {
                      setState(() {
                        cadreVertValideMotDePasse = true;
                        etoileErreurMotDePasse = false;
                      });
                    } else {
                      setState(() {
                        cadreVertValideMotDePasse = false;
                        etoileErreurMotDePasse = true;
                      });
                    }
                  },
                  validator: (val) {
                    if (val == null || val.isEmpty) {
                      setState(() {
                        etoileErreurMotDePasse = true;
                        cadreVertValideMotDePasse = false;
                      });
                      return 'Ce champ est obligatoire';
                    }
                    if (!_regexMotDePasse.hasMatch(val)) {
                      setState(() {
                        etoileErreurMotDePasse = true;
                        cadreVertValideMotDePasse = false;
                      });
                      return 'Min. 6 caractères avec une lettre, un chiffre et un caractère spécial (_, #, @)';
                    }
                    setState(() {
                      etoileErreurMotDePasse = false;
                      cadreVertValideMotDePasse = true;
                    });
                    return null;
                  },
                ),
                if (cadreVertValideMotDePasse)
                  Padding(
                    padding: const EdgeInsets.only(top: 4, right: 12),
                    child: Align(
                      alignment: Alignment.centerRight,
                      child: Text(
                        'Correct',
                        style:
                        TextStyle(color: Colors.green, fontSize: 12),
                      ),
                    ),
                  ),

                const SizedBox(height: 30),

                // Remember Me + Forgot Password
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        Checkbox(
                          value: rememberMe,
                          onChanged: (value) {
                            setState(() {
                              rememberMe = value ?? false;
                            });
                          },
                        ),
                        Text("Se souvenir de moi",
                            style: TextStyle(color: couleurGris)),
                      ],
                    ),
                    TextButton(
                      onPressed: () {},
                      child: const Text(
                        "Mot de passe oublié ?",
                        style: TextStyle(
                            color: Color(0xFFE61580),
                            fontWeight: FontWeight.w500),
                      ),
                    )
                  ],
                ),

                const SizedBox(height: 16),

                // Bouton Se connecter
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () {
                      if (_formKey.currentState?.validate() ?? false) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('Connexion réussie')),
                        );
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFFE61580),
                      padding: const EdgeInsets.symmetric(vertical: 14),
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    child: const Text("Se connecter"),
                  ),
                ),

                const SizedBox(height: 16),

                // OU
                Row(
                  children: [
                    const Expanded(child: Divider(color: Color(0xFFE61580))),
                    const SizedBox(width: 8),
                    Text("ou", style: TextStyle(color: couleurGris)),
                    const SizedBox(width: 8),
                    const Expanded(child: Divider(color: Color(0xFFE61580))),
                  ],
                ),

                const SizedBox(height: 16),

                // Google / Facebook
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      onPressed: () {},
                      icon: Image.asset("assets/google.png", height: 20),
                      label: const Text("Google"),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.black,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        side: const BorderSide(color: Colors.grey),
                      ),
                    ),
                    ElevatedButton.icon(
                      onPressed: () {},
                      icon: Image.asset("assets/facebook.png", height: 20),
                      label: const Text("Facebook"),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.black,
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        side: const BorderSide(color: Colors.grey),
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 24),

                GestureDetector(
                  /*onTap: () {
                    Navigator.push(
                      context,
                     MaterialPageRoute(
                          builder: (_) => const PageInscription()),
                    );
                  },*/
                  child: const Text(
                    "Don’t have an account? Register",
                    style: TextStyle(
                      color: Color(0xFFE61580),
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.underline,
                    ),
                  ),
                ),
                const SizedBox(height: 20),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
